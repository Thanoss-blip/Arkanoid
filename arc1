import os
import sys
import pygame
import random
import datetime

# функция, отвечающая за загрузку "карты уровня"


def load_level(filename):
    filename = "data/" + filename
    with open(filename, 'r') as mapFile:
        level_map = [line.strip() for line in mapFile]
    return level_map


# функция генерации нового уровня,
# в неё передаётся "карта уровня"
def generate_level(level):
    x = 0
    y = 0
    k = 0
    for i in range(len(level)):
        for j in range(len(level[i])):
            if level[i][j] == 'g':
                b = Brick(x, y)
                bricks.add(b)
                k += 1
            if level[i][j] == 'b':
                b = BrickBreak(x, y)
                bricks.add(b)
                k += 1
            if level[i][j] == 'y':
                b = InvisibleBreak(x, y)
                bricks.add(b)
                k += 1
            x += 60
        y += 30
        x = 0
    return k


# функция, обрабатывающая столкновение мяча
# и других игровых объектов
def collision(obj1, obj2):
    if obj2.vx >= 0:
        xdelta = obj2.rect.right - obj1.rect.left
    elif obj2.vx < 0:
        xdelta = obj1.rect.right - obj2.rect.left
    if obj2.vy >= 0:
        ydelta = obj2.rect.bottom - obj1.rect.top
    elif obj2.vy < 0:
        ydelta = obj1.rect.bottom - obj2.rect.top
    if xdelta > ydelta:
        obj2.vy = -obj2.vy
    elif ydelta > xdelta:
        obj2.vx = -obj2.vx
    elif xdelta == ydelta:
        obj2.vy = -obj2.vy
        obj2.vx = -obj2.vx


# функция, отвечающая за загрузку изображения
def load_image(name, colorkey=None):
    fullname = os.path.join('data', name)
    if not os.path.isfile(fullname):
        print(f"Файл с изображением '{fullname}' не найден")
        sys.exit()
    image = pygame.image.load(fullname)
    return image


# функция, отвечающая за генерацию "призовых капсул",
# которые появляются с вероятностью 1 к 3 (33%)
# тип "капсулы" выбирается случайно
def booster(x, y):
    probability_list = [True] * 1 + [False] * 3
    probability = random.choice(probability_list)
    if probability is True:
        choice = random.choice([Laser_boost, Boost, Reduce_boost])
        boosts.add(choice(x, y))


# класс кирпича (блока)
class Brick(pygame.sprite.Sprite):

    image = load_image("к.png")
    image = pygame.transform.scale(image, (60, 30))

    def __init__(self, x, y, *group):
        super().__init__(*group)
        self.image = Brick.image
        self.rect = self.image.get_rect()
        self.mask = pygame.mask.from_surface(self.image)
        self.rect.x = x
        self.rect.y = y

    def update(self):
        global BRICKS_COUNT, SCORE
        if pygame.sprite.spritecollide(self, bullets, True):
            self.kill()
            sound = pygame.mixer.Sound('data/collision.mp3')
            sound.play()
            create_particles((self.rect.x, self.rect.y))
            BRICKS_COUNT -= 1
            SCORE += 5
        if pygame.sprite.collide_mask(self, ball):
            sound = pygame.mixer.Sound('data/collision.mp3')
            sound.play()
            # при столкновении с шаром вызывается функция,
            # корректно обрабатывающая столкновение
            # с какой стороной кирпича столкнулся шарик
            collision(self, ball)
            self.kill()
            BRICKS_COUNT -= 1
            SCORE += 5
            create_particles((self.rect.x, self.rect.y))
            booster(self.rect.x, self.rect.y)


# класс кирпичей, ломающихся не с первого раза
# наследуется от основного класса кирпича
class BrickBreak(Brick):
    image = load_image("к2.png")
    image = pygame.transform.scale(image, (60, 30))

    def __init__(self, x, y, *group):
        super().__init__(x, y, *group)
        self.image = BrickBreak.image
        self.check = False

    def update(self):
        global BRICKS_COUNT, SCORE
        if pygame.sprite.spritecollide(self, bullets, True):
            sound = pygame.mixer.Sound('data/collision.mp3')
            sound.play()
            if self.check is True:
                self.kill()
                create_particles((self.rect.x, self.rect.y))
                BRICKS_COUNT -= 1
                SCORE += 10
            elif self.check is False:
                image = load_image("к2-2.png")
                image = pygame.transform.scale(image, (60, 30))
                self.image = image
                self.check = True

        if pygame.sprite.collide_mask(self, ball):
            sound = pygame.mixer.Sound('data/collision.mp3')
            sound.play()
            collision(self, ball)
            if self.check is True:
                self.kill()
                create_particles((self.rect.x, self.rect.y))
                BRICKS_COUNT -= 1
                SCORE += 10
                booster(self.rect.x, self.rect.y)
            elif self.check is False:
                # при первом ударе шарика кирпич "размораживается"
                # спрайт его меняется
                image = load_image("к2-2.png")
                image = pygame.transform.scale(image, (60, 30))
                self.image = image
                self.check = True


# класс невидимых до первого столкновения с шаром кирпичей
# наследуется от основного класса кирпича
class InvisibleBreak(Brick):

    image = load_image("к3-2.png")
    image = pygame.transform.scale(image, (60, 30))

    def __init__(self, x, y, *group):
        super().__init__(x, y, *group)
        self.image = InvisibleBreak.image
        self.check2 = False

    def update(self):
        global BRICKS_COUNT, SCORE
        if pygame.sprite.spritecollide(self, bullets, True):
            sound = pygame.mixer.Sound('data/collision.mp3')
            sound.play()
            if self.check2 is True:
                self.kill()
                create_particles((self.rect.x, self.rect.y))
                BRICKS_COUNT -= 1
                SCORE += 10
            elif self.check2 is False:
                image = load_image("к3.png")
                image = pygame.transform.scale(image, (60, 30))
                self.image = image
                self.check2 = True

        if pygame.sprite.collide_mask(self, ball):
            sound = pygame.mixer.Sound('data/collision.mp3')
            sound.play()
            collision(self, ball)
            if self.check2 is True:
                self.kill()
                create_particles((self.rect.x, self.rect.y))
                BRICKS_COUNT -= 1
                SCORE += 10
                booster(self.rect.x, self.rect.y)
            elif self.check2 is False:
                image = load_image("к3.png")
                image = pygame.transform.scale(image, (60, 30))
                self.image = image
                self.check2 = True


# класс шарика
class Ball(pygame.sprite.Sprite):

    image = load_image("шарик.png")
    image = pygame.transform.scale(image, (25, 25))

    def __init__(self, *group):
        super().__init__(*group)
        self.image = Ball.image
        self.check = False
        self.rect = self.image.get_rect()
        self.vx = 0
        self.vy = 0
        self.mask = pygame.mask.from_surface(self.image)
        self.rect.x = platform.rect.x + platform.rect.width // 2 - 12
        self.rect.y = platform.rect.y - 25

    def update(self):
        global LIVES, RETURN
        self.rect = self.rect.move(self.vx, self.vy)
        if pygame.sprite.spritecollideany(self, horizontal_borders):
            self.vy = -self.vy
            # при пересечении нижней границы отнимается одна жизнь
            if self.rect.y >= 800 - 25:
                LIVES -= 1
                RETURN = True

        if pygame.sprite.spritecollideany(self, vertical_borders):
            self.vx = -self.vx
        if self.check is False:
            self.rect.x = platform.rect.x + platform.rect.width // 2 - 12
            self.rect.y = platform.rect.y - 25
        if pygame.sprite.collide_mask(self, platform):
            collision(platform, ball)


# класс стенок
class Border(pygame.sprite.Sprite):

    def __init__(self, x1, y1, x2, y2):
        super().__init__(all_sprites)
        if x1 == x2:
            self.add(vertical_borders)
            self.image = pygame.Surface([1, y2 - y1])
            self.rect = pygame.Rect(x1, y1, 1, y2 - y1)
        else:
            self.add(horizontal_borders)
            self.image = pygame.Surface([x2 - x1, 1])
            self.rect = pygame.Rect(x1, y1, x2 - x1, 1)


# класс платформы
class Platform(pygame.sprite.Sprite):

    image = load_image("платформа.png")
    image = pygame.transform.scale(image, (200, 25))

    def __init__(self):
        super().__init__(all_sprites)
        self.image = Platform.image
        self.rect = self.image.get_rect()
        self.mask = pygame.mask.from_surface(self.image)
        self.rect.x = 200
        self.rect.y = 700

    def update(self, *args):
        # движение платформы, в *args передаётся аргумент
        # rel (сдвиг платформы по обеим осям)
        if args != ():
            x = args[0][0]
            if x > 0:
                delta = self.rect.x + self.rect.width
                if delta + x > 1000:
                    self.rect.x = 1000 - self.rect.width
                else:
                    self.rect.x += x
            elif x < 0:
                delta = self.rect.x
                if abs(x) > delta:
                    self.rect.x = 0
                else:
                    self.rect.x = self.rect.x + x


# класс призовой капсулы "расширение",
# от него наследуются все остальные классы
class Boost(pygame.sprite.Sprite):

    image = load_image("фр.png")
    image = pygame.transform.scale(image, (40, 40))

    def __init__(self, x, y, *group):
        super().__init__(*group)
        self.image = Boost.image
        self.rect = self.image.get_rect()
        self.vx = 0
        self.vy = 2
        self.mask = pygame.mask.from_surface(self.image)
        self.rect.x = x
        self.rect.y = y

    def update(self):
        global SCORE
        self.rect = self.rect.move(self.vx, self.vy)
        if pygame.sprite.collide_mask(self, platform):
            sound = pygame.mixer.Sound('data/boost.mp3')
            sound.play()
            SCORE += 20
            x = platform.rect.x
            image = load_image("платформа.png")
            # увеличение платформы
            if platform.rect.width == 200:
                platform.image = pygame.transform.scale(image, (300, 25))
            if platform.rect.width == 100:
                platform.image = pygame.transform.scale(image, (200, 25))
            platform.rect = platform.image.get_rect()
            platform.rect.y = 700
            if x + platform.rect.width > 1000:
                x = 1000 - platform.rect.width
            platform.rect.x = x
            platform.mask = pygame.mask.from_surface(platform.image)
            self.kill()


# класс призовой капсулы "уменьшение доски"
class Reduce_boost(Boost):

    image = load_image("фу.png")
    image = pygame.transform.scale(image, (40, 40))

    def __init__(self, x, y, *group):
        super().__init__(x, y, *group)
        self.image = Reduce_boost.image

    def update(self):
        global SCORE
        self.rect = self.rect.move(self.vx, self.vy)
        if pygame.sprite.collide_mask(self, platform):
            sound = pygame.mixer.Sound('data/boost.mp3')
            sound.play()
            SCORE += 20
            x = platform.rect.x
            # уменьшение платформы
            # от 300 пикс. к 200, от 200 к 100
            image = load_image("платформа.png")
            if platform.rect.width == 200:
                platform.image = pygame.transform.scale(image, (100, 25))
            if platform.rect.width == 300:
                platform.image = pygame.transform.scale(image, (200, 25))
            platform.rect = platform.image.get_rect()
            platform.rect.y = 700
            platform.rect.x = x
            platform.mask = pygame.mask.from_surface(platform.image)
            self.kill()


# класс призовой капсулы "установка для стрельбы"
class Laser_boost(Boost):

    image = load_image("фл.png")
    image = pygame.transform.scale(image, (40, 40))

    def __init__(self, x, y, *group):
        super().__init__(x, y, *group)
        self.image = Laser_boost.image

    def update(self):
        global SCORE
        self.rect = self.rect.move(self.vx, self.vy)
        if pygame.sprite.collide_mask(self, platform):
            sound = pygame.mixer.Sound('data/boost.mp3')
            sound.play()
            SCORE += 20
            laser1 = Laser('left')
            laser2 = Laser('right')
            lasers.add(laser1)
            lasers.add(laser2)
            self.kill()


# сама "установка для стрельбы"
# лазерная установка - небольшие пушки по краям платформы
class Laser(pygame.sprite.Sprite):

    image = load_image("Пущка.png")
    image = pygame.transform.scale(image, (20, 20))

    def __init__(self, typ_e, *group):
        super().__init__(*group)
        self.image = Laser.image
        self.rect = self.image.get_rect()
        if typ_e == 'left':
            self.rect.x = platform.rect.x
            self.rect.y = platform.rect.y - 18
        else:
            self.rect.x = platform.rect.x + platform.rect.width - 20
            self.rect.y = platform.rect.y - 18
        self.type = typ_e

    def update(self, *args):
        if self.type == 'left':
            self.rect.x = platform.rect.x
            self.rect.y = platform.rect.y - 18
        else:
            self.rect.x = platform.rect.x + platform.rect.width - 20
            self.rect.y = platform.rect.y - 18
        if args != ():
            # сюда передаётся аргумент True, при нажатии лкм
            # который создаёт пули
            if args[0] is True:
                sound = pygame.mixer.Sound('data/shoot.mp3')
                sound.play()
                bullet1 = Bullet(self.rect.x, self.rect.y)
                bullet2 = Bullet(self.rect.x, self.rect.y)
                bullets.add(bullet1)
                bullets.add(bullet2)


# класс пуль, смещаются относительно оси "y"
class Bullet(pygame.sprite.Sprite):

    image = load_image("Пулька.png")
    image = pygame.transform.scale(image, (20, 20))

    def __init__(self, x, y, *group):
        super().__init__(*group)
        self.image = Bullet.image
        self.rect = self.image.get_rect()
        self.vx = 0
        self.vy = -4
        self.rect.x = x
        self.rect.y = y

    def update(self):
        self.rect = self.rect.move(self.vx, self.vy)


# частицы, которые возникают при уничтожении кирпичей
class Particle(pygame.sprite.Sprite):

    firer = [load_image("частица.png")]
    fire = []
    for scale in (3, 3, 3):
        fire.append(pygame.transform.scale(firer[0], (scale, scale)))

    def __init__(self, pos, dx, dy):
        super().__init__(all_sprites)
        self.image = random.choice(self.fire)
        self.rect = self.image.get_rect()
        self.velocity = [dx, dy]
        self.rect.x, self.rect.y = pos
        self.gravity = 1

    def update(self):
        self.velocity[1] += self.gravity
        self.rect.x += self.velocity[0]
        self.rect.y += self.velocity[1]
        if not self.rect.colliderect(screen_rect):
            self.kill()


# функция создания частичек
def create_particles(position):
    particle_count = 20
    numbers = range(-5, 6)
    for _ in range(particle_count):
        Particle(position, random.choice(numbers), random.choice(numbers))


# стартовый экран
def start_screen():
    size = width, height = 560, 400
    pygame.display.set_caption('Арканоид')
    screen1 = pygame.display.set_mode(size)
    intro_text = "Для начала игры нажмите ЛКМ"

    fon = pygame.transform.scale(load_image('Escaball.png'), size)
    screen1.blit(fon, (0, 0))
    font = pygame.font.SysFont('kacstbook', 30)
    text_coord = 50
    string_rendered = font.render(intro_text, 1, pygame.Color('white'))
    intro_rect = string_rendered.get_rect()
    intro_rect.top = 10
    intro_rect.x = 10
    screen1.blit(string_rendered, intro_rect)
    clock = pygame.time.Clock()
    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.KEYDOWN or \
                    event.type == pygame.MOUSEBUTTONDOWN:
                return
        pygame.display.flip()
        clock.tick(80)


# экран конца игры
def end_screen():
    if WIN is True:
        sound = pygame.mixer.Sound('data/win.mp3')
        sound.play()
    else:
        sound = pygame.mixer.Sound('data/game over.mp3')
        sound.play()
    size = width, height = 1000, 800
    pygame.display.set_caption('Арканоид')
    screen2 = pygame.display.set_mode(size)
    if WIN is True:
        fon = pygame.transform.scale(load_image('win_screen.png'), size)
    else:
        fon = pygame.transform.scale(load_image('lose_screen.png'), size)
    screen2.blit(fon, (0, 0))
    # сдесь осуществляется чтение из файла
    # с набранными очками за все игры
    # и записывается новая информация о счете
    with open('data/SCORE.txt', 'a') as inp:
        print(str(SCORE), ' - ', str(datetime.datetime.now()),
              file=inp, end='\n')

    with open('data/SCORE.txt', 'r') as outp:
        total = [line.strip() for line in outp]
    total = ["Your last results:"] + total
    font = pygame.font.Font(None, 30)
    text_coord = 50
    for line in total:
        string_rendered = font.render(line, 1, pygame.Color(76, 187, 23))
        intro_rect = string_rendered.get_rect()
        text_coord += 10
        intro_rect.top = text_coord
        intro_rect.x = 40
        text_coord += intro_rect.height
        screen.blit(string_rendered, intro_rect)
    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
        pygame.display.flip()
        clock.tick(80)


# функция рисования на экране окошка счета и счетчика жизни
def draw(screen):
    font = pygame.font.Font(None, 27)
    text = font.render('SCORE: ' + str(SCORE), True, (100, 255, 100))
    text_x = 800
    text_y = 760
    text_w = text.get_width()
    text_h = text.get_height()
    screen.blit(text, (text_x, text_y))
    pygame.draw.rect(screen, (0, 255, 0), (text_x - 10, text_y - 10,
                                           text_w + 20, text_h + 20), 1)
    text = font.render('LIVES: ' + str(LIVES), True, (100, 255, 100))
    text_x = 700
    text_y = 760
    text_w = text.get_width()
    text_h = text.get_height()
    screen.blit(text, (text_x, text_y))
    pygame.draw.rect(screen, (0, 255, 0), (text_x - 10, text_y - 10,
                                           text_w + 20, text_h + 20), 1)

# далее следует создание главного окна и всех необходимых групп спрайтов,
# а также сам игровой цикл
if __name__ == '__main__':
    pygame.init()
    start_screen()
    size = width, height = 1000, 800
    pygame.display.set_caption('Арканоид')
    screen = pygame.display.set_mode(size)
    screen.fill('black')
    running = True
    fps = 80
    screen_rect = (0, 0, width, height)

    bricks = pygame.sprite.Group()
    all_sprites = pygame.sprite.Group()
    boosts = pygame.sprite.Group()
    lasers = pygame.sprite.Group()
    bullets = pygame.sprite.Group()
    horizontal_borders = pygame.sprite.Group()
    vertical_borders = pygame.sprite.Group()

    platform = Platform()
    ball = Ball()
    all_sprites.add(ball)
    Border(0, 0, width, 0)
    Border(0, height, width, height)
    Border(0, 0, 0, height)
    Border(width, 0, width, height)
    clock = pygame.time.Clock()
    LIVES = 3
    SCORE = 0
    WIN = False
    CURRENT_LEVEL = 1
    BRICKS_COUNT = generate_level(load_level('level ' +
                                             str(CURRENT_LEVEL) + '.txt'))
    RETURN = False
    draw(screen)

    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            if event.type == pygame.MOUSEMOTION:
                platform.update(event.rel)
            if event.type == pygame.MOUSEBUTTONDOWN:
                if ball.check is False:
                    ball.check = True
                    ball.vx = random.choice([3, 4, 5, 6, 7])
                    ball.vy = 10 - ball.vx
                lasers.update(True)

        screen.fill('black')
        draw(screen)

        bricks.update()
        bricks.draw(screen)

        all_sprites.update()
        all_sprites.draw(screen)

        boosts.update()
        boosts.draw(screen)

        lasers.update()
        lasers.draw(screen)

        bullets.update()
        bullets.draw(screen)
        # потеря жизни
        if RETURN is True:
            sound = pygame.mixer.Sound('data/live lost.mp3')
            sound.play()
            bricks = pygame.sprite.Group()
            boosts = pygame.sprite.Group()
            lasers = pygame.sprite.Group()
            bullets = pygame.sprite.Group()
            platform.kill()
            platform = Platform()
            ball.check = False
            BRICKS_COUNT = generate_level(load_level(
                'level ' + str(CURRENT_LEVEL) + '.txt'))
            RETURN = False

        # потеря всех трёх жизней
        if LIVES == 0:
            platform.kill()
            platform = Platform()
            bricks = pygame.sprite.Group()
            boosts = pygame.sprite.Group()
            lasers = pygame.sprite.Group()
            bullets = pygame.sprite.Group()
            ball.check = False
            CURRENT_LEVEL = 1
            end_screen()

        # ситуация, когда уничтожены все кирпичи (переход
        # на новый уровень)
        if BRICKS_COUNT == 0:
            platform.kill()
            platform = Platform()
            bricks = pygame.sprite.Group()
            boosts = pygame.sprite.Group()
            lasers = pygame.sprite.Group()
            bullets = pygame.sprite.Group()
            ball.check = False
            if CURRENT_LEVEL == 3:
                WIN = True
                end_screen()
            else:
                CURRENT_LEVEL += 1
                sound = pygame.mixer.Sound('data/next level.mp3')
                sound.play()
                BRICKS_COUNT = generate_level(load_level(
                    'level ' + str(CURRENT_LEVEL) + '.txt'))
        clock.tick(fps)
        pygame.display.flip()
    pygame.quit()
